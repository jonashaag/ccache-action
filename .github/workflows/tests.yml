name: Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

defaults:
  run:
    shell: bash

env:
  CCACHE_ACTION_CI: true

jobs:
  build:
    # Run npm build and check that the dist/ folder is up to date.
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build
        run: |
          npm install
          git diff --exit-code

  test_ccache:
    # Test that ccache/sccache are installed and configured correctly.
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        sccache: [true, false]
        exclude:
          - os: windows-latest
            sccache: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Run ccache-action
        id: ccache
        uses: ./
        with:
          verbose: 2
          sccache: ${{ matrix.sccache }}
          max-size: 10M
          key: parent
      - name: Test ccache
        run: |
          [[ ${{ steps.ccache.outputs.test-cache-hit }} = true ]] || [[ ${{ steps.ccache.outputs.test-cache-hit }} = false ]]
          if ${{ matrix.sccache }}; then
            which sccache
            sccache -V
            sccache -s
            sccache -s | grep -E 'Max cache size.+10 MiB'
            sccache -s | grep -E 'Cache location.+ccache-action/\.sccache'
          else
            which ccache
            ccache -V
            ccache -s || true  # Some versions of ccache don't have -s
          fi

          # Compile a test program to put something in the cache
          echo "int x;" > test.c
          ccache_variant=$([[ ${{ matrix.sccache }} = true ]] && echo "sccache" || echo "ccache")
          $ccache_variant gcc test.c -c -o test.o

  test_cache_hit:
    # Test that loading from the cache works.
    needs: [test_ccache]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        sccache: [true, false]
        exclude:
          - os: windows-latest
            sccache: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Test output true
        uses: ./
        id: output
        with:
          sccache: ${{ matrix.sccache }}
          key: parent
      - name: Test output true
        run: |
          [[ ${{ steps.output.outputs.test-cache-hit }} = true ]]

  test_cache_miss:
    # Test that cache misses do not break anything.
    needs: [test_ccache]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        sccache: [true, false]
        exclude:
          - os: windows-latest
            sccache: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - run: |
          echo "RAND=$RANDOM" >> $GITHUB_ENV
      - name: Test output false
        uses: ./
        id: output
        with:
          sccache: ${{ matrix.sccache }}
          key: random-key-${{ env.RAND }}
      - name: Test output false
        run: |
          [[ ${{ steps.output.outputs.test-cache-hit }} = false ]]

  test_restore_keys:
    # Test the "restore-keys" option.
    needs: [test_ccache]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        sccache: [true, false]
        exclude:
          - os: windows-latest
            sccache: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - run: |
          echo "RAND=$RANDOM" >> $GITHUB_ENV
      - name: Test restore-keys
        uses: ./
        id: restore-keys
        with:
          sccache: ${{ matrix.sccache }}
          key: child-${{ env.RAND }}
          restore-keys: |
            parent
      - name: Test restore-keys
        run: |
          [[ ${{ steps.restore-keys.outputs.test-cache-hit }} = true ]]
